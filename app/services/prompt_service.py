from typing import Dict, Optional, Tuple, List
import re
from app.services.database_service import DatabaseService
from app.services.DungChung import lay_du_lieu_tu_sql_server

class PromptService:
    def __init__(self):
        self.prompts: Dict[str, Tuple[str, List[str]]] = {}
        self._load_prompts()

    def _load_prompts(self):
        """T·∫£i c√°c prompt t·ª´ file prompt"""
        try:
            with open('data/promt_documentai.md', 'r', encoding='utf-8') as file:
                content = file.read()
                # Ph√¢n t√°ch n·ªôi dung theo {{CHUCNANG01}}
                sections = re.split(r'{{CHUCNANG\d+}}', content)
                #print(sections)
                for section in sections:
                    if not section.strip():
                        continue
                    # Tr√≠ch xu·∫•t KyHieu t·ª´ ph·∫ßn
                    ky_hieu_match = re.search(r'\`KyHieu\`:\s*"([^"]+)"', section)
                    if not ky_hieu_match:
                        continue
                        
                    ky_hieu = ky_hieu_match.group(1)
                    prompt = section.strip()
                    prompt = prompt + """
üéØ L∆∞u √Ω: 
1. Tr√≠ch **ch√≠nh x√°c t√™n c∆° quan tr·ª±c ti·∫øp ban h√†nh vƒÉn b·∫£n** theo c√°c quy t·∫Øc sau:
* N·∫øu vƒÉn b·∫£n c√≥:
  * D√≤ng 1 l√† c∆° quan ch·ªß qu·∫£n (VD: ‚ÄúUBND T·ªàNH...‚Äù)
  * D√≤ng 2 l√† t√™n ƒë·ªãa ph∆∞∆°ng (VD: ‚ÄúHUY·ªÜN...‚Äù)
  * D√≤ng 3 l√† ƒë∆°n v·ªã tr·ª±c thu·ªôc (VD: ‚ÄúBAN QLDA...‚Äù)
    ‚Üí **Ch·ªâ l·∫•y d√≤ng 3** l√†m c∆° quan ban h√†nh.
* N·∫øu ch·ªâ c√≥ 1 d√≤ng ho·∫∑c 2 d√≤ng m√† kh√¥ng c√≥ ƒë∆°n v·ªã tr·ª±c thu·ªôc ‚Üí c√≥ th·ªÉ gh√©p l·∫°i (VD: ‚Äú·ª¶Y BAN NH√ÇN D√ÇN HUY·ªÜN ...‚Äù).
‚úÖ Kh√¥ng bao gi·ªù l·∫•y c∆° quan ch·ªß qu·∫£n n·∫øu c√≥ ƒë∆°n v·ªã c·∫•p d∆∞·ªõi tr·ª±c ti·∫øp k√Ω vƒÉn b·∫£n.

2. Tr√≠ch **SoVanBan**, **SoVanBanCanCu** ho·∫∑c **TrichYeu** ƒë√∫ng ch√≠nh x√°c, gi·ªØ nguy√™n k√Ω hi·ªáu ƒë·∫ßy ƒë·ªß, bao g·ªìm d·∫•u ti·∫øng Vi·ªát. ƒê·∫∑c bi·ªát:
üîí B·∫Øt bu·ªôc gi·ªØ nguy√™n c√°c ch·ªØ vi·∫øt t·∫Øt c√≥ d·∫•u trong s·ªë hi·ªáu vƒÉn b·∫£n, g·ªìm:
- **"Qƒê"** - vi·∫øt t·∫Øt c·ªßa "Quy·∫øt ƒë·ªãnh"
- **"HƒêND"** - vi·∫øt t·∫Øt c·ªßa "H·ªôi ƒë·ªìng nh√¢n d√¢n"
- **"Hƒê"** - vi·∫øt t·∫Øt c·ªßa "H·ª£p ƒë·ªìng" ho·∫∑c "H·ªôi ƒë·ªìng"
- **"Tƒê"** - vi·∫øt t·∫Øt c·ªßa "Th·∫©m ƒë·ªãnh"
- **"HƒêTƒê"** - vi·∫øt t·∫Øt c·ªßa "H·ªôi ƒë·ªìng th·∫©m ƒë·ªãnh"
- C√°c t·ª´ vi·∫øt t·∫Øt kh√°c c√≥ ch·ªØ **"ƒê"**, **kh√¥ng ƒë∆∞·ª£c chuy·ªÉn th√†nh "D"**

3. Trong qu√° tr√¨nh nh·∫≠n d·∫°ng, n·∫øu c√≥ s·ª± m·ªù, nhi·ªÖu ho·∫∑c kh√≥ ƒë·ªçc, h√£y ∆∞u ti√™n d·ª± ƒëo√°n c√°c k√Ω t·ª± theo nguy√™n t·∫Øc sau:
- 1 d·ªÖ nh·∫ßm v·ªõi 7, 4, I, l ‚Üí ∆∞u ti√™n ch·ªçn 1 n·∫øu to√†n b·ªô chu·ªói kh·ªõp m·∫´u.
- 0 d·ªÖ nh·∫ßm v·ªõi O, D, Q ‚Üí n·∫øu ƒëi k√®m vƒÉn b·∫£n h√†nh ch√≠nh th√¨ ch·ªçn 0.
- 2 d·ªÖ nh·∫ßm v·ªõi Z, S ‚Üí n·∫øu xu·∫•t hi·ªán ·ªü ƒë·∫ßu chu·ªói th√¨ ∆∞u ti√™n l√† 2.
- 5 d·ªÖ nh·∫ßm v·ªõi S ‚Üí n·∫øu n·∫±m trong s·ªë hi·ªáu th√¨ ∆∞u ti√™n l√† 5.
- 8 d·ªÖ nh·∫ßm v·ªõi B, 3 ‚Üí n·∫øu k√Ω t·ª± ƒëi k√®m l√† ‚ÄúC√¥ng vƒÉn‚Äù th√¨ ch·ªçn B, ng∆∞·ª£c l·∫°i ch·ªçn 8.
- 9 d·ªÖ nh·∫ßm v·ªõi g, q, 4 ‚Üí n·∫øu trong c·ª•m s·ªë hi·ªáu th√¨ ch·ªçn 9.
- Ch·ªâ ch·∫•p nh·∫≠n k·∫øt qu·∫£ n·∫øu th·ªèa m√£n regex ƒë·ªãnh d·∫°ng chu·∫©n: ^\d{1,6}(/[A-Z0-9]{1,6})?/Qƒê-UBND(\.\w+|-?\w+)?$
- Tr·∫£ v·ªÅ duy nh·∫•t chu·ªói s·ªë hi·ªáu vƒÉn b·∫£n h·ª£p l·ªá. N·∫øu kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c ƒë√∫ng m·∫´u, tr·∫£ v·ªÅ chu·ªói r·ªóng ""

4. B·∫°n PH·∫¢I tr·∫£ v·ªÅ **duy nh·∫•t m·ªôt chu·ªói JSON h·ª£p l·ªá**, KH√îNG th√™m vƒÉn b·∫£n, gi·∫£i th√≠ch ho·∫∑c ƒë·ªãnh d·∫°ng kh√°c
```
{
    "ThongTinChung": {
        "t√™n c·ªôt": "gi√° tr·ªã"
    },
    "BangDuLieu": [
        {
            "t√™n c·ªôt": "gi√° tr·ªã"
        }
        ...
    ]
}
```
"""
                    # Tr√≠ch xu·∫•t c√°c c·ªôt b·∫Øt bu·ªôc d·ª±a tr√™n ky_hieu
                    required_columns = self._get_required_columns(ky_hieu)
                    # print("=====required_columns=====")
                    # print(required_columns)
                    self.prompts[ky_hieu] = (prompt, required_columns)
        except Exception as e:
            print(f"L·ªói khi t·∫£i prompts: {str(e)}")
            # Kh·ªüi t·∫°o v·ªõi prompts r·ªóng n·∫øu vi·ªác t·∫£i file th·∫•t b·∫°i
            self.prompts = {}

    def _get_required_columns(self, loai_van_ban: str) -> List[str]:
        """L·∫•y c√°c c·ªôt b·∫Øt bu·ªôc d·ª±a tr√™n loaiVanBan"""
        # C√°c c·ªôt m·∫∑c ƒë·ªãnh lu√¥n b·∫Øt bu·ªôc
        default_columns = ["TenKMCP"]
        try:
            # Th·ª±c hi·ªán truy v·∫•n SQL ƒë·ªÉ l·∫•y d·ªØ li·ªáu
            query = """select NghiepVuID=ChucNangAIID, BangDuLieu from ChucNangAI order by STT"""
            result = lay_du_lieu_tu_sql_server(query)
            # Kh·ªüi t·∫°o dictionary ƒë·ªÉ l∆∞u k·∫øt qu·∫£
            column_mapping = {}
            
            # Duy·ªát qua t·ª´ng d√≤ng k·∫øt qu·∫£
            for _, row in result.iterrows():
                # L·∫•y NghiepVuID v√† BangDuLieu
                nghiep_vu_id = row['NghiepVuID']
                bang_du_lieu = row['BangDuLieu']
                # T√°ch BangDuLieu th√†nh m·∫£ng c√°c c·ªôt b·∫±ng d·∫•u ;
                columns = bang_du_lieu.split(';')
                # Th√™m v√†o dictionary
                column_mapping[nghiep_vu_id] = columns
            # print("--------------------------------")
            # print(column_mapping.get(loai_van_ban, default_columns))
            return column_mapping.get(loai_van_ban, default_columns)
            
        except Exception as e:
            print(f"L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ CSDL: {str(e)}")
            return default_columns

    def get_prompt(self, loai_van_ban: Optional[str]) -> Tuple[str, List[str]]:
        """
        L·∫•y prompt v√† c√°c c·ªôt b·∫Øt bu·ªôc cho m·ªôt loaiVanBan c·ª• th·ªÉ
        N·∫øu loaiVanBan l√† None ho·∫∑c kh√¥ng t√¨m th·∫•y, tr·∫£ v·ªÅ prompt v√† c√°c c·ªôt m·∫∑c ƒë·ªãnh
        """
        if loai_van_ban and loai_van_ban in self.prompts:
            return self.prompts[loai_van_ban]
        # Tr·∫£ v·ªÅ prompt v√† c√°c c·ªôt m·∫∑c ƒë·ªãnh n·∫øu kh√¥ng t√¨m th·∫•y loaiVanBan
        return "", []